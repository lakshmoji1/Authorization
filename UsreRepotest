package com.shopme.admin.user;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.annotation.Rollback;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;

@DataJpaTest(showSql= false)
@AutoConfigureTestDatabase(replace= Replace.NONE)
@Rollback(false)
public class UserRepositoryTests {
	@Autowired
	private UserRepository repo;
	
	@Autowired
	private TestEntityManager entityManager;
	
	@Test
	public void testCreateNewUserWithOneRole()
	{
		Role roleAdmin = entityManager.find(Role.class, 1);
		User userNamHM = new User("nam@codejav.net", "nam2020", "Nam", "Ha Minh");
		userNamHM.addRole(roleAdmin);
		
		User savedUser = repo.save(userNamHM);
		
		assertThat(savedUser.getId()).isGreaterThan(0);
		
	}
	
	@Test
	public void testCreateNewUserWithTwoRoles()
	{
		User userRavi = new User("massmaharaj@gmail.com", "ravi2020", "Ravi", "RAJ");
		Role roleEditor = new Role(3);
		Role roleAssistant = new Role(5);
		userRavi.addRole(roleEditor);
		userRavi.addRole(roleAssistant);
		
		User savedUser= repo.save(userRavi);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}
	
	
	@Test
	public void testListAllUsers()
	{
		Iterable<User> listUsers = repo.findAll();
		listUsers.forEach(user -> System.out.println(user));
		
	}
	
	@Test
	public void testGetUserById()
	{
		User userNam = repo.findById(9).get();
		System.out.println(userNam);
		assertThat(userNam).isNotNull();
	}
	
	@Test
	public void testUpdateUserDetails()
	{
		
		User userNam = repo.findById(9).get();
		System.out.println(userNam);
		userNam.setEnabled(true);
		userNam.setEmail("namjavprogrammer@gmail.com");
		System.out.println(userNam);
		repo.save(userNam);
	}
	
	@Test
	public void testUpdateUserRoles() {
		User userRavi = repo.findById(28).get();
		Role roleEditor = new Role(1); 
		Role roleSalesPerson = new Role(2);
		userRavi.getRoles().remove(roleEditor); 
		
	
		repo.save(userRavi);
	}
	
	
	@Test
	public void testDeleteUser()
	{
		Integer userId=18;
		repo.deleteById(userId);
	
	}
	
	
	@Test
	public void testGetUserByEmail()
	{
		String email = "ravi@gmail.com";
		User user = repo.getUserByEmail(email);
		
		assertThat(user).isNotNull();
	}
	
	@Test
	public void testCountById()
	{
		Integer id =1;
		Long countById = repo.countById(id);
		assertThat(countById).isNotNull().isGreaterThan(-1);
	}
	
	@Test
	public void testDisabledUser()
	{
		Integer id=6;
		repo.updateEnabledStatus(id,false);
	}
	
	@Test
	public void testEnabledUser()
	{
		Integer id=6;
		repo.updateEnabledStatus(id,true);
	}
	
	@Test
	public void testListFirstPage() {
		int pageNumber = 1;
		int pageSize = 5;
		
		Pageable pageable = PageRequest.of(pageNumber, pageSize);
		Page<User> page = repo.findAll(pageable);
		
		List<User> listUsers = page.getContent();
		
		listUsers.forEach(user -> System.out.println(user));
		
		assertThat(listUsers.size()).isEqualTo(pageSize);
	}
	
	
}

		
